Project title: Viral Beauty Hub - TikTok trending haircare & skincare store
Author: Thuy Trang Skalska

=========================
1. Project overview
=========================
"Viral Beauty Hub" is an online store that curates trending TikTok haircare and skincare products in one place. It provides users with an easy and secure way to discover, review and purchase viral beauty items.

Main features:
- User authentication (register/login/logout)
- Product catalog (with filters/search)
- Shopping cart and checkout
- Order management and tracking
- Product reviews and ratings
- Admin interface for product management

=========================
2. Functionalities as functions
=========================

Backend (Python Flask):
-------------------------
1. def register_user(username: str, email: str, password: str) -> bool
    - Creates a new user account
2. def login_user(email: str, password: str) -> bool
    - Authenticates user
3. def get_all_products(filter: Optional[str] = None) -> list
    - Retrieves product list, optionally filtered
4. def get_product_details(product_id: int) -> dict
    - Returns detailed product info
5. def add_to_cart(user_id: int, product_id: int, quantity: int) -> bool
    - Adds product to user’s cart
6. def remove_from_cart(user_id: int, product_id: int) -> bool
    - Removes product from cart
7. def checkout(user_id: int, payment_info: dict) -> bool
    - Processes order and saves to DB
8. def submit_review(user_id: int, product_id: int, rating: int, comment: str) -> bool
    - Adds product review
9. def get_user_orders(user_id: int) -> list
    - Lists user’s past orders
10. def admin_add_product(product_data: dict) -> bool
    - Admin uploads a new product

Frontend (HTML/CSS/JavaScript):
-------------------------
- HTML forms for login/register
- Static product grid with simple filters 
- Shopping cart view (editable quantities)
- Order summary page
- Dashboard: user info, past orders
- Admin page for adding/editing products

=========================
3. Class Structure 
=========================

class User:
    id: int
    name: str
    email: str
    password_hash: str

class Product:
    id: int
    name: str
    price: float
    stock: int
    description: str
    image_url: str

class Order:
    id: int
    user_id: int
    status: str
    order_date: datetime
    total_price: float

class OrderItem:
    id: int
    order_id: int
    product_id: int
    quantity: int
    price: float

class Review:
    id: int
    user_id: int
    product_id: int
    rating: int
    comment: str
    review_date: datetime

=========================
4. Data Storage
=========================
- Relational DB: PostgreSQL (or SQLite for dev)
- Tables: Users, Products, Orders, OrderItems, Reviews

=========================
5. Server structure
=========================
- Flask server handles routes and logic
- Frontend uses HTML/CSS
- Authentication with session/cookie
- Data served via templates or RESTful endpoints